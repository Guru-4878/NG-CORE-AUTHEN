import {
  Component,
  Output,
  EventEmitter,
  OnInit,
  AfterViewInit, OnDestroy
} from '@angular/core';
import { TranslateService } from '@ngx-translate/core';

import { LayoutService } from '../services/layout.service';
import { ConfigService } from '../services/config.service';
import { AuthService } from '../auth/auth.service';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { filter } from 'rxjs/operators';
import { Subscription } from 'rxjs';
import { QueryParamsHandling } from '@angular/router';
import { localStorageinfo, localStorageType } from '../util/constant';

export interface iBreadcrumb {
  displayText: string;
  navURL: string;
}

export interface MenuItem {
  label?: string;
  icon?: string;
  command?: (event?: any) => void;
  url?: string;
  items?: MenuItem[];
  expanded?: boolean;
  disabled?: boolean;
  visible?: boolean;
  target?: string;
  routerLinkActiveOptions?: any;
  separator?: boolean;
  badge?: string;
  badgeStyleClass?: string;
  style?: any;
  styleClass?: string;
  title?: string;
  id?: string;
  automationId?: any;
  tabindex?: string;
  routerLink?: any;
  queryParams?: { [k: string]: any };
  fragment?: string;
  queryParamsHandling?: QueryParamsHandling;
  preserveFragment?: boolean;
  skipLocationChange?: boolean;
  replaceUrl?: boolean;
  state?: {
    [k: string]: any;
  }
}

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.scss']
})
export class NavbarComponent implements OnInit, AfterViewInit, OnDestroy {

  static readonly ROUTE_DATA_BREADCRUMB = 'title';
  currentSlug = this.route.snapshot.data.title;
  currentSlug_url = '';
  currentsubSlug = '';
  currentLang = 'en';
  toggleClass = 'ft-maximize';
  placement = 'bottom-right';
  public isCollapsed = true;
  @Output()
  toggleHideSidebar = new EventEmitter<Object>();

  public config: any = {};
  userName: any = '';
  client: any = '';
  subscription: Subscription;
  readonly home = { icon: 'pi pi-home', url: 'home' };
  menuItems: MenuItem[];

  constructor(
    public translate: TranslateService,
    private layoutService: LayoutService,
    private configService: ConfigService,
    private auth: AuthService,
    private router: Router,
    private route: ActivatedRoute
  ) {
    const browserLang: string = translate.getBrowserLang();
    translate.use(browserLang.match(/en|es|pt|de/) ? browserLang : 'en');
  }

  ngOnInit() {
    this.config = this.configService.templateConf;
    const userdata = this.auth.getkeyValue(localStorageinfo.Userdata, localStorageType.object);
    this.userName = userdata.firstname + ' ' + userdata.lastname;
    this.client = this.auth.currentUserClient.client_name;
    this.menuItems = this.createBreadcrumbs(this.route.root)
    this.subscription = this.router.events
      .pipe(filter(event => event instanceof NavigationEnd))
      .subscribe(() => this.menuItems = this.createBreadcrumbs(this.route.root));
  }

  setBreadcrumb() {
    if (location.pathname.split('/').length > 3) {
      this.currentSlug_url = null;
      if (this.route.snapshot.url.length > 1) {
        this.currentSlug_url = this.route.snapshot.url[1].path;
      }
    } else {
      this.currentsubSlug = null;
    }
  }

  ucFirst(string) {
    if (!string) {
      return string;
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  ngAfterViewInit() {
    if (this.config.layout.dir) {
      const dir = this.config.layout.dir;
      if (dir === 'rtl') {
        this.placement = 'bottom-left';
      } else if (dir === 'ltr') {
        this.placement = 'bottom-right';
      }
    }
  }

  ChangeLanguage(language: string) {
    this.translate.use(language);
  }

  ToggleClass() {
    if (this.toggleClass === 'ft-maximize') {
      this.toggleClass = 'ft-minimize';
    } else {
      this.toggleClass = 'ft-maximize';
    }
  }

  toggleNotificationSidebar() {
    this.layoutService.emitChange(true);
  }

  toggleSidebar() {
    console.log('afsd');
    const appSidebar = document.getElementsByClassName('app-sidebar')[0];
    if (appSidebar.classList.contains('hide-sidebar')) {
      this.toggleHideSidebar.emit(false);
    } else {
      this.toggleHideSidebar.emit(true);
    }
  }

  logout() {
    this.auth.logout();
  }

  receiveMessage($event) {
    this.currentsubSlug = $event
  }

  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  private createBreadcrumbs(route: ActivatedRoute, url: string = '', breadcrumbs: MenuItem[] = []): MenuItem[] {
    const children: ActivatedRoute[] = route.children;

    if (children.length === 0) {
      return breadcrumbs;
    }

    for (const child of children) {
      const routeURL: string = child.snapshot.url.map(segment => segment.path).join('/');
      if (routeURL !== '') {
        url += `/${routeURL}`;
      }
      // url = url.replace("#", "");
      const label = child.snapshot.data[NavbarComponent.ROUTE_DATA_BREADCRUMB];
      const result = breadcrumbs.find((o) => o.label === label);
      if (label && !result) {// (!isNullOrUndefined(label)) {
        breadcrumbs.push({ label, url });
      }
     // console.log(breadcrumbs);
      return this.createBreadcrumbs(child, url, breadcrumbs);
    }
  }

}
--------------------------
<!-- Navbar (Header) Starts -->
<nav class="header-navbar navbar navbar-expand-lg navbar-light bg-faded">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="nav-toggle  " id="sidebarToggle"  data-toggle="expanded"
      #toggleIcon appSidebarToggle>
      
        <img
          src="assets/img/menu-close.png"
          class=""
          
        />
      </a>

      <ul class="breadcrubmul">
        <li><a routerLinkActive="active-link" routerLink="/{{ client }}/authorize">Home </a></li>
        <li>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="14"
            height="14"
            viewBox="0 0 14 14"
          >
            <path
              fill="none"
              fill-rule="evenodd"
              stroke="#74879B"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M4.5 12.5l5-5-5-5"
            />
          </svg>
        </li>
        <li *ngIf="this.menuItems && this.menuItems.length >= 1">
          <a routerLinkActive="active-link" [(routerLink)]="menuItems[0].url">{{ this.menuItems[0].label }}</a>
        </li>
        <li *ngIf="this.menuItems && this.menuItems.length >= 2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="14"
            height="14"
            viewBox="0 0 14 14"
          >
            <path
              fill="none"
              fill-rule="evenodd"
              stroke="#74879B"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M4.5 12.5l5-5-5-5"
            />
          </svg>
        </li>
        <li  *ngIf="this.menuItems && this.menuItems.length >= 2">
          <a routerLinkActive="active-link" [(routerLink)]="this.menuItems[0].url">{{ this.menuItems[1].label }}</a>
        </li>
        
      </ul>

      <button
        type="button"
        class="navbar-toggle d-lg-none float-left"
        data-toggle="collapse"
        (click)="toggleSidebar()"
      >
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <span class="d-lg-none navbar-right navbar-collapse-toggle">
        <a
          class="open-navbar-container"
          (click)="isCollapsed = !isCollapsed"
          [attr.aria-expanded]="!isCollapsed"
          aria-controls="navbarSupportedContent"
        >
          <i class="ft-more-vertical"></i>
        </a>
      </span>
    </div>
    <div class="navbar-container">
      <div
        class="collapse navbar-collapse"
        id="navbarSupportedContent"
        [ngbCollapse]="isCollapsed"
      >
        <ul class="navbar-nav topbar-header">
          <li>
            <a href="">
              <svg
                class="icon icon-Notification_bell"
                viewBox="0 0 32 32"
                style="width:20px;height:20px;"
              >
                <path
                  fill="#909fbb"
                  style="fill: var(--color1, #909fbb)"
                  d="M13.16 24.869v-1.043h6.267v1.043c0 1.73-1.403 3.133-3.133 3.133s-3.133-1.403-3.133-3.133v0zM5.333 22.783v-2.556c0.011-1.441 0.586-2.745 1.515-3.705l-0.001 0.001 2.133-2.133c0.938-0.935 1.519-2.228 1.519-3.656 0-0.019-0-0.038-0-0.057l0 0.003v-0.945c0-3.17 2.57-5.739 5.739-5.739s5.739 2.57 5.739 5.739v0 0.991c0.011 1.441 0.585 2.745 1.513 3.706l-0.001-0.002 2.133 2.133c0.994 0.907 1.616 2.207 1.617 3.653v2.556z"
                ></path>
              </svg>
            </a>
          </li>
          <li class="nav-item " ngbDropdown [placement]="placement">
            <a
              class="nav-link position-relative"
              id="dropdownBasic3"
              ngbDropdownToggle
            >
              <ngx-avatar name="{{ userName }}" size="40"></ngx-avatar>

              <b>{{ userName }} </b>
            </a>
            <div
              ngbDropdownMenu
              aria-labelledby="dropdownBasic3"
              class="text-left"
            >
              <a class="dropdown-item py-1" >
                <i class="ft-edit mr-2"></i>
                <span>My Profile</span>
              </a>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item" (click)="logout()">
                <i class="ft-power mr-2"></i>
                <span>Logout</span>
              </a>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </div>
</nav>
<!-- Navbar (Header) Ends -->
