using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Repository.Repositories;
using Microsoft.EntityFrameworkCore;

namespace Repository
{
    public class Repository<T> : IRepository<T> where T : class
    {
        protected readonly DbContext Context;
        
        //private IDbSet<T> _entities;
        public Repository(DbContext context)
        {
            Context = context;
        }

        public T Get(int id)
        {
            return Context.Set<T>().Find(id);
        }

        public IEnumerable<T> GetAll()
        {
            return Context.Set<T>().ToList();
        }

        public IEnumerable<T> Find(Expression<Func<T, bool>> predicate)
        {
            return Context.Set<T>().Where(predicate);
        }

        public T SingleOrDefault(Expression<Func<T, bool>> predicate)
        {
            return Context.Set<T>().SingleOrDefault(predicate);
        }

        public void Add(T entity)
        {
            Context.Set<T>().Add(entity);
        }

        public void AddRange(IEnumerable<T> entities)
        {
            Context.Set<T>().AddRange(entities);
        }

        public void Remove(T entity)
        {
            Context.Set<T>().Remove(entity);
        }

        public void RemoveRange(IEnumerable<T> entities)
        {
            Context.Set<T>().RemoveRange(entities);
        }

        public void Insert(T entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity");
            }
            Context.Set<T>().Add(entity);
            Context.SaveChanges();
        }

        public void Update(T entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity");
            }
            Context.Entry(entity).State = EntityState.Modified;
            Context.SaveChanges();
        }

        public void Delete(T entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException("entity");
            }
            Context.Set<T>().Remove(entity);
            Context.SaveChanges();
        }
        public IQueryable<T> Get<T>(Expression<Func<T, bool>> predicate, params Expression<Func<T, object>>[] includes) where T : class
        {
            var query = Context.Set<T>().AsNoTracking();
            if (includes != null)
                if (includes.Length > 0)
                    foreach (var include in includes)
                        query = query.Include(include);
            return query.Where(predicate);
        }
        public Task<int> CountAll() => Context.Set<T>().CountAsync();

        public Task<int> CountWhere(Expression<Func<T, bool>> predicate)
            => Context.Set<T>().CountAsync(predicate);

        public  IQueryable<T> SelectQuery(string query, params object[] parameters)
        {
            // return Context.Set<T>.SqlQuery(query, parameters).AsQueryable();
            var Query = Context.Set<T>().FromSqlRaw<T>(query, parameters).AsQueryable();
            return Query;
        }

        //public virtual IQueryable<T> Table
        //{
        //    get
        //    {
        //        return this.Entities;
        //    }
        //}

        //private IDbSet<T> Entities
        //{
        //    get
        //    {
        //        if (_entities == null)
        //        {

        //            _entities = _context.Set<T>();

        //        }
        //        return _entities;
        //    }
        //}
        //public ICollection<TType> Fetch<TType>(Expression<Func<T, bool>> where, Expression<Func<T, TType>> select) where TType : class
        //{
        //    return Entities.Where(where).Select(select).ToList();
        //}

        //public virtual IEnumerable<T> GetEnumerable(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, params Expression<Func<T, object>>[] includeProperties)
        //{
        //    IQueryable<T> query = Entities;

        //    if (filter != null)
        //    {
        //        query = query.Where(filter);
        //    }


        //    foreach (var includeProperty in includeProperties)
        //    {
        //        if (includeProperty != null)
        //            query = query.Include(includeProperty);
        //    }


        //    if (orderBy != null)
        //    {
        //        return orderBy(query).ToList();
        //    }
        //    else
        //    {
        //        return query.ToList();
        //    }
        //}
        //public IQueryable<T> Get(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, params Expression<Func<T, object>>[] includeProperties)
        //{
        //    IQueryable<T> query = Entities;

        //    if (filter != null)
        //    {
        //        query = query.Where(filter);
        //    }

        //    foreach (var includeProperty in includeProperties)
        //    {
        //        query = query.Include(includeProperty);
        //    }

        //    if (orderBy != null)
        //    {
        //        return orderBy(query);
        //    }
        //    else
        //    {
        //        return query;
        //    }
        //}
        //public virtual IQueryable<T> GetQuery(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null)
        //{
        //    IQueryable<T> query = Entities;

        //    if (filter != null)
        //        query = query.Where(filter);

        //    if (orderBy != null)
        //        query = orderBy(query);

        //    return query;
        //}

    }
}
------------------------------------------------------------------------------------------Irepo
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Repository.Repositories
{
    public interface IRepository<T> where T : class
    {

        T Get(int id);
        IEnumerable<T> GetAll();
        IEnumerable<T> Find(Expression<Func<T, bool>> predicate);
        T SingleOrDefault(Expression<Func<T, bool>> predicate);

        void Add(T entity);
        void AddRange(IEnumerable<T> entities);

        void Remove(T entity);
        void RemoveRange(IEnumerable<T> entities);
        void Insert(T entity);
        void Update(T entity);
        void Delete(T entity);

        IQueryable<T> Get<T>(Expression<Func<T, bool>> predicate, params Expression<Func<T, object>>[] includes) where T : class;
        Task<int> CountAll();
        Task<int> CountWhere(Expression<Func<T, bool>> predicate);

        //IQueryable<T> Table { get; }
        //ICollection<TType> Fetch<TType>(Expression<Func<T, bool>> where, Expression<Func<T, TType>> select) where TType : class;

        //IEnumerable<T> GetEnumerable(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, params Expression<Func<T, object>>[] includeProperties);

        //IQueryable<T> Get(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, params Expression<Func<T, object>>[] includeProperties);
        //IQueryable<T> GetQuery(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null);

        //// 1. SqlQuery approach
        //ICollection ExcuteSqlQuery(string sqlQuery, CommandType commandType, SqlParameter[] parameters = null);

        //// 2. SqlCommand approach
        //void ExecuteNonQuery(string commandText, CommandType commandType, SqlParameter[] parameters = null);

        //ICollection ExecuteReader(string commandText, CommandType commandType, SqlParameter[] parameters = null);

    }
}
